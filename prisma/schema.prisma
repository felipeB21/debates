datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  ownedDebates  Debate[]        @relation("DebateOwner")
  joinedDebates DebateUser[]
  messages      Message[]
 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

enum Genre {
  POLITICA
  CIENCIA
  TECNOLOGIA
  SALUD
  MEDIO_AMBIENTE
  EDUCACION
  ENTRETENIMIENTO
  DEPORTES
  NEGOCIOS
}
enum Role {
  ADMIN
  PARTICIPANT
}
model Debate {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  isActive    Boolean     @default(true)
  genre       Genre
  
  ownerId     String      @db.ObjectId
  owner       User        @relation("DebateOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  participants DebateUser[]
  messages     Message[]
  
  maxParticipants Int     @default(8)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model DebateUser {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  debateId  String    @db.ObjectId
  debate    Debate    @relation(fields: [debateId], references: [id], onDelete: Cascade)
  
  role      Role      @default(PARTICIPANT)
  
  micEnabled Boolean  @default(false)
  
  joinedAt   DateTime @default(now())
  
  @@unique([userId, debateId])
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relaci√≥n con el debate al que pertenece el mensaje
  debateId  String    @db.ObjectId
  debate    Debate    @relation(fields: [debateId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now())
}